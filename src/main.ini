// Define RF module pins if not defined in build flags
#ifndef RF_MODULE_CS
#define RF_MODULE_CS SS // 18 for your TTGO board
#endif

#ifndef RF_MODULE_RST
#define RF_MODULE_RST RST // 23 for your TTGO board
#endif

#ifndef RF_MODULE_DIO1
#define RF_MODULE_DIO1 -1 // Not connected on most TTGO boards
#endif

#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include "SSD1306Wire.h"
#include <ArduinoJson.h>
#include <ArduinoLog.h>
#include <rtl_433_ESP.h>
#include "KlimaLoggDecode.h"
#include "FrameParser.h"

// Built-in LED pin for TTGO LoRa32
#define LED_PIN 25

// Undefine the board's default pin definitions to avoid warnings
#undef OLED_SDA
#undef OLED_SCL
#undef OLED_RST

// Define our custom pin configuration for v2.0/v2.1
#define OLED_SDA 21
#define OLED_SCL 22
#define OLED_RST -1  // No reset pin needed

// LoRa pins for TTGO LoRa32
#define SCK     5    // GPIO5  -- SX1278's SCK
#define MISO    19   // GPIO19 -- SX1278's MISO
#define MOSI    27   // GPIO27 -- SX1278's MOSI
#define SS      18   // GPIO18 -- SX1278's CS
#define RST     23   // GPIO23 -- SX1278's RESET
#define DI0     26   // GPIO26 -- SX1278's IRQ(Interrupt Request)

// Define RF module parameters if not defined in build flags
#ifndef RF_MODULE_FREQUENCY
#define RF_MODULE_FREQUENCY 868.33
#endif

// Initialize display with the correct pins
SSD1306Wire display(0x3c, OLED_SDA, OLED_SCL);

#define JSON_MSG_BUFFER 512
char messageBuffer[JSON_MSG_BUFFER];

rtl_433_ESP rf;
int count = 0;
bool klimaloggReceived = false;
unsigned long lastKlimaLoggTime = 0;

// Forward declaration
void rtl_433_Callback(char* message);

// Process decoded data for KlimaLogg
void processKlimaLoggData(uint8_t* buffer, size_t length, int rssi) {
  // Debug print the raw data
  Log.trace(F("Potential KlimaLogg data, RSSI: %d, Length: %d bytes" CR), rssi, length);
  String rawHex = "";
  for (size_t i = 0; i < min(length, (size_t)32); i++) {
    char hex[4];
    sprintf(hex, "%02X ", buffer[i]);
    rawHex += hex;
  }
  Log.trace(F("Data: %s..." CR), rawHex.c_str());
  
  if (length >= 230) {
    // Try parsing with KlimaLogg parser
    auto currentData = KlimaLoggFrameParser::parseCurrentWeatherFrame(buffer, length);
    
    // Check if we have valid data
    bool hasValidData = false;
    for (int x = 0; x < 9; x++) {
      if (KlimaLoggDecode::isValidTemperature(currentData.temperature[x])) {
        hasValidData = true;
        break;
      }
    }
    
    if (hasValidData) {
      Log.notice(F("Valid KlimaLogg data received!" CR));
      klimaloggReceived = true;
      lastKlimaLoggTime = millis();
      
      // Update display with data
      display.clear();
      display.setTextAlignment(TEXT_ALIGN_CENTER);
      display.drawString(64, 0, "KlimaLogg Pro");
      
      display.setTextAlignment(TEXT_ALIGN_LEFT);
      if (KlimaLoggDecode::isValidTemperature(currentData.temperature[0])) {
        display.drawString(0, 15, "Base: " + String(currentData.temperature[0], 1) + "°C " + 
                                  String(currentData.humidity[0]) + "%");
      }
      
      // Show remote sensors
      int y = 25;
      for (int x = 1; x < 9; x++) {
        if (KlimaLoggDecode::isValidTemperature(currentData.temperature[x])) {
          String batteryStatus = KlimaLoggFrameParser::getBatteryStatus(currentData.alarmData, x) ? "" : "!";
          display.drawString(0, y, "S" + String(x) + batteryStatus + ": " + 
                                 String(currentData.temperature[x], 1) + "°C " + 
                                 String(currentData.humidity[x]) + "%");
          y += 10;
          if (y > 50) break;
        }
      }
      display.display();
      
      // Create JSON for standard callback
      DynamicJsonDocument jsonDoc(1024);
      jsonDoc["model"] = "KlimaLogg-Pro";
      jsonDoc["protocol"] = "TFA KlimaLogg Pro";
      jsonDoc["rssi"] = rssi;
      
      // Add sensor data
      for (int x = 0; x < 9; x++) {
        if (KlimaLoggDecode::isValidTemperature(currentData.temperature[x])) {
          jsonDoc["sensor" + String(x) + "_temp_C"] = currentData.temperature[x];
          jsonDoc["sensor" + String(x) + "_humidity"] = currentData.humidity[x];
          jsonDoc["sensor" + String(x) + "_battery_ok"] = 
              KlimaLoggFrameParser::getBatteryStatus(currentData.alarmData, x);
        }
      }
      
      String jsonString;
      serializeJson(jsonDoc, jsonString);
      strcpy(messageBuffer, jsonString.c_str());
      rtl_433_Callback(messageBuffer);
      
      // Flash LED for received packet
      for (int i = 0; i < 3; i++) {
        digitalWrite(LED_PIN, HIGH);
        delay(100);
        digitalWrite(LED_PIN, LOW);
        delay(100);
      }
    }
  }
}

// Callback function to process decoded messages
void rtl_433_Callback(char* message) {
  DynamicJsonDocument jsonDocument(1024);
  DeserializationError error = deserializeJson(jsonDocument, message);
  
  if (error) {
    Log.error(F("deserializeJson() failed: %s" CR), error.c_str());
    return;
  }
  
  // Check for raw data from FSK that might be KlimaLogg
  if (jsonDocument.containsKey("raw_data")) {
    const char* raw_hex = jsonDocument["raw_data"];
    size_t len = strlen(raw_hex) / 2;
    uint8_t buffer[256]; // Adjust size as needed
    
    // Convert hex string to bytes
    for (size_t i = 0; i < len; i++) {
      char hex[3] = {raw_hex[i*2], raw_hex[i*2+1], 0};
      buffer[i] = strtol(hex, NULL, 16);
    }
    
    int rssi = -999;
    if (jsonDocument.containsKey("rssi")) {
      rssi = jsonDocument["rssi"].as<int>();
    }
    
    // Process as KlimaLogg data
    processKlimaLoggData(buffer, len, rssi);
    return;
  }
  
  // Standard processing for recognized packets
  const char* protocol = jsonDocument["protocol"];
  if (protocol && strstr(protocol, "KlimaLogg") != NULL) {
    Log.notice(F("KlimaLogg data recognized by rtl_433!"));
    klimaloggReceived = true;
    lastKlimaLoggTime = millis();
    
    // Update display with KlimaLogg data
    display.clear();
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.drawString(64, 0, "KlimaLogg Pro");
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.drawString(0, 15, "Packet #" + String(count));
    
    // Display temperature if available
    if (jsonDocument.containsKey("temperature_C")) {
      float temp = jsonDocument["temperature_C"];
      display.drawString(0, 25, "Temp: " + String(temp) + "°C");
    }
    
    // Display humidity if available
    if (jsonDocument.containsKey("humidity")) {
      int humidity = jsonDocument["humidity"];
      display.drawString(0, 35, "Humidity: " + String(humidity) + "%");
    }
    
    display.display();
    
    // Flash LED for received packet
    for (int i = 0; i < 3; i++) {
      digitalWrite(LED_PIN, HIGH);
      delay(100);
      digitalWrite(LED_PIN, LOW);
      delay(100);
    }
  }
  
  // Log all JSON data
  String jsonString;
  serializeJson(jsonDocument, jsonString);
  Log.notice(F("Received message: %s" CR), jsonString.c_str());
  count++;
}

// Custom function to monitor signal strength - fixed to use RSSI from debug info
void monitorSignal() {
  // The library doesn't have a getCurrentRssi method, so we'll just display
  // static text instead for now
  // Display RSSI if no KlimaLogg data received recently
  if (!klimaloggReceived || (millis() - lastKlimaLoggTime > 10000)) {
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.drawString(0, 50, "Waiting for signal...");
    display.display();
  }
}

void setup() {
  // Initialize serial
  Serial.begin(115200);
  delay(1000);
  
  Log.begin(LOG_LEVEL_TRACE, &Serial);
  Log.notice(F("KlimaLogg Receiver starting" CR));
  
  // Set up LED pin
  pinMode(LED_PIN, OUTPUT);
  
  // Initialize I2C
  Wire.begin(OLED_SDA, OLED_SCL);
  
  // Initialize display
  Log.notice(F("Initializing display" CR));
  if (!display.init()) {
    Log.error(F("Display initialization failed!" CR));
  } else {
    Log.notice(F("Display initialized successfully" CR));
    
    display.flipScreenVertically();
    display.setFont(ArialMT_Plain_10);
    display.clear();
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.drawString(64, 10, "KlimaLogg Pro");
    display.drawString(64, 30, "Receiver");
    display.display();
  }
  
  // Initialize SPI for the radio
  SPI.begin(SCK, MISO, MOSI, SS);
  
  // Configure FSK reception for KlimaLogg
  Log.notice(F("Initializing rtl_433_ESP..." CR));
  rf.initReceiver(DI0, RF_MODULE_FREQUENCY);
  rf.setCallback(rtl_433_Callback, messageBuffer, JSON_MSG_BUFFER);
  rf.enableReceiver();
  
  Log.notice(F("Receiver initialized, waiting for KlimaLogg signals" CR));
  rf.getModuleStatus();
  
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.drawString(64, 10, "KlimaLogg Pro");
  display.drawString(64, 30, "Ready to receive");
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.drawString(0, 50, "RSSI: waiting...");
  display.display();
  
  Log.notice(F("Setup complete" CR));
}

void loop() {
  static unsigned long lastUpdate = 0;
  static unsigned long lastRssiCheck = 0;
  static int uptime = 0;
  
  // Process any incoming data
  rf.loop();
  
  // Check signal status every second
  if (millis() - lastRssiCheck >= 1000) {
    lastRssiCheck = millis();
    monitorSignal();
  }
  
  // Update display every second with uptime and packet count if no KlimaLogg data
  if (millis() - lastUpdate >= 1000) {
    lastUpdate = millis();
    uptime++;
    
    // Only update if no packet was recently received
    if (!klimaloggReceived || (millis() - lastKlimaLoggTime > 10000)) {
      display.clear();
      display.setTextAlignment(TEXT_ALIGN_CENTER);
      display.drawString(64, 0, "KlimaLogg Pro");
      display.drawString(64, 15, "Listening...");
      
      // Show packet counter
      display.setTextAlignment(TEXT_ALIGN_LEFT);
      display.drawString(0, 30, "Packets: " + String(count));
      
      // Show uptime
      display.drawString(0, 40, "Uptime: " + String(uptime) + "s");
      
      // RSSI will be added by monitorSignal function
      
      display.display();
    }
    
    // Toggle LED
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    Log.verbose(F("Running for %d seconds, Packets: %d" CR), uptime, count);
  }
}